exports.id=21,exports.ids=[21],exports.modules={6793:(e,t,o)=>{Promise.resolve().then(o.t.bind(o,84247,23)),Promise.resolve().then(o.t.bind(o,68459,23)),Promise.resolve().then(o.t.bind(o,12719,23)),Promise.resolve().then(o.t.bind(o,35902,23)),Promise.resolve().then(o.t.bind(o,48298,23)),Promise.resolve().then(o.t.bind(o,50270,23)),Promise.resolve().then(o.t.bind(o,77868,23)),Promise.resolve().then(o.t.bind(o,10686,23))},16521:(e,t,o)=>{Promise.resolve().then(o.t.bind(o,1957,23)),Promise.resolve().then(o.t.bind(o,48453,23)),Promise.resolve().then(o.t.bind(o,14221,23)),Promise.resolve().then(o.t.bind(o,54540,23)),Promise.resolve().then(o.t.bind(o,97844,23)),Promise.resolve().then(o.t.bind(o,74888,23)),Promise.resolve().then(o.t.bind(o,82262,23)),Promise.resolve().then(o.t.bind(o,45856,23))},18012:(e,t,o)=>{"use strict";o.d(t,{F:()=>f});var n=o(85132),r=o(22324);let s=async(e,t)=>{if(!e.ok){let t=await e.text(),o=`API error: ${e.status}`;try{let e=JSON.parse(t);e.error&&("string"==typeof e.error?o=e.error:e.error.message&&(o=e.error.message,e.error.type&&(o+=` (${e.error.type})`)))}catch(e){o+=` - ${t}`}throw Error(o)}if(!e.body)throw Error("Response body is null");let o=e.body.getReader(),n=new TextDecoder,r="",s=[];try{for(;;){let{done:e,value:a}=await o.read();if(e)break;let i=(r+=n.decode(a,{stream:!0})).split("\n");for(let e of(r=i.pop()||"",i))if(e.trim())try{if(e.includes('"error":')){let t=JSON.parse(e);if(t.error){let e="Error in response";throw"string"==typeof t.error?e=t.error:t.error.message&&(e=t.error.message,t.error.type&&(e+=` (${t.error.type})`)),Error(e)}}let o=JSON.parse(e);t(o),s.push(o)}catch(t){if(console.error("Error parsing JSON:",t,"Line:",e),t instanceof Error&&(t.message.includes("Error in response")||t.message.includes("overloaded")))throw t;if(e.includes("error")||e.includes("exception")||e.includes("fail")){let t="Error in response";try{let o=e.match(/"error":\s*"([^"]+)"/);o&&o[1]?t=o[1]:(e.includes("timeout")||e.includes("timed out"))&&(t="Request timed out. The server might be busy.")}catch(o){t=`Error in response: ${e.substring(0,100)}${e.length>100?"...":""}`}throw Error(t)}}}if(r.trim())try{let e=JSON.parse(r);t(e),s.push(e)}catch(e){throw console.error("Error parsing final buffer JSON:",e,"Buffer:",r),Error(`Error parsing final chunk: ${e instanceof Error?e.message:String(e)} - Buffer: ${r.substring(0,100)}...`)}return s}catch(e){throw console.error("Error reading stream:",e),e}},a=`${r.f}/api`,i=`${r.f}/api`,c=`${r.f}/api`,l=e=>{let t=e.data;return void 0===t.is_default&&(t.is_default=!1),t},d=(e,t,o)=>{if(console.error(`Failed to create ${t||"unknown type"} connection '${o||"unnamed"}':`,e),n.A.isAxiosError(e)&&e.response)throw Error(e.response.data.detail||`Failed to create connection: ${e.message}`);if(e instanceof Error)throw e;throw Error("An unexpected error occurred while creating the connection.")},u={listConnections:async()=>(await n.A.get(`${c}/connections`)).data,getConnectionTypes:async()=>(await n.A.get(`${c}/connections/types`)).data,getConnection:async e=>(await n.A.get(`${c}/connections/${e}`)).data,async createConnection(e){let{name:t,type:o,...r}=e;if(!t||!o)throw Error("Connection name and type are required.");let s={name:t,payload:{type:o,...r}};try{let e=await n.A.post(`${c}/connections`,s);return l(e)}catch(e){throw d(e,o,t),Error("Connection creation failed.")}},async updateConnection(e,t){let{name:o,type:r,...s}=t,a={};o&&(a.name=o);let i=Object.keys(s).filter(e=>"type"!==e&&"name"!==e).reduce((e,t)=>(e[t]=s[t],e),{});if(Object.keys(i).length>0&&(a.payload={type:r,...i}),!a.name&&!a.payload)throw Error("Update requires at least a name or config field changes.");try{let t=await n.A.put(`${c}/connections/${e}`,a);return l(t)}catch(e){throw d(e,r,o||"existing connection"),Error("Connection update failed.")}},deleteConnection:async e=>(await n.A.delete(`${c}/connections/${e}`),!0),setDefaultConnection:async e=>(await n.A.post(`${c}/connections/${e}/default`),!0),async getToolsForConnection(e){try{return(await n.A.get(`${c}/connections/${e}/tools`)).data}catch(t){if(console.error(`Failed to fetch tools for connection type ${e}:`,t),n.A.isAxiosError(t)&&t.response?.status===404)return[];throw t}},async testConnection(e){let{type:t,...o}=e;if(!t)throw Error("Connection type is required for testing.");let r={payload:{type:t,...o}};try{return(await n.A.post(`${c}/connections/test`,r)).data}catch(e){if(console.error(`Failed to test ${t} connection:`,e),n.A.isAxiosError(e)&&e.response)return{valid:!1,message:e.response.data.detail||`Testing failed: ${e.message}`};if(e instanceof Error)return{valid:!1,message:e.message};return{valid:!1,message:"An unexpected error occurred during testing."}}}},p={list:u.listConnections,getTypes:u.getConnectionTypes,get:u.getConnection,create:u.createConnection,update:u.updateConnection,delete:u.deleteConnection,setDefault:u.setDefaultConnection,test:u.testConnection,getTools:u.getToolsForConnection},h=n.A.create({baseURL:`${r.f}/api`,headers:{"Content-Type":"application/json"}});h.interceptors.response.use(e=>e,e=>(console.error("API Error:",e),Promise.reject(e)));let f={notebooks:{list:async()=>(await n.A.get(`${a}/notebooks`)).data,get:async e=>(await n.A.get(`${a}/notebooks/${e}`)).data,create:async e=>(await n.A.post(`${a}/notebooks`,e)).data,update:async(e,t)=>(await n.A.put(`${a}/notebooks/${e}`,t)).data,delete:async e=>{await n.A.delete(`${a}/notebooks/${e}`)},sendMessage:async(e,t,o)=>(await n.A.post(`${a}/notebooks/${e}/cells/${t}/message`,{message:o})).data},models:{listModels:async()=>(await n.A.get(`${i}/models`)).data,getCurrentModel:async()=>(await n.A.get(`${i}/models/current`)).data,setCurrentModel:async e=>(await n.A.post(`${i}/models/current`,{model_id:e})).data},connections:p,cells:{list:async e=>(await h.get(`/notebooks/${e}/cells`)).data,get:async(e,t)=>(await h.get(`/notebooks/${e}/cells/${t}`)).data,create:async(e,t)=>{let o={...t,cell_type:t.type};delete o.type,console.log("Creating cell with data:",o);let n=(await h.post(`/notebooks/${e}/cells`,o)).data;return n.cell_type&&!n.type&&(n.type=n.cell_type),n},update:async(e,t,o)=>(await h.put(`/notebooks/${e}/cells/${t}`,o)).data,delete:async(e,t)=>{await h.delete(`/notebooks/${e}/cells/${t}`)},execute:async(e,t,o)=>(await h.post(`/notebooks/${e}/cells/${t}/execute`,o)).data,sendMessage:async(e,t,o)=>(await h.post(`/notebooks/${e}/cells/${t}/message`,{message:o})).data},chat:{createSession:async e=>{if(!e)throw Error("Notebook ID is required to create a chat session");try{let t=await fetch(`${r.f}/api/chat/sessions`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({notebook_id:e})});if(!t.ok){let e=await t.text();throw Error(`Failed to create chat session: ${t.status} - ${e}`)}return await t.json()}catch(e){throw console.error("Error creating chat session:",e),e}},getSessionMessages:async e=>{try{let t=await fetch(`${r.f}/api/chat/sessions/${e}/messages`);if(!t.ok){let e=await t.text();throw Error(`Failed to get session messages: ${t.status} - ${e}`)}let o=await t.text(),n=[],s=null;for(let e of o.split("\n"))if(e.trim())try{let t=JSON.parse(e);s&&s.role===t.role?(s.content+=t.content,s.timestamp=t.timestamp):(s&&n.push(s),s={...t})}catch(e){console.error("Error parsing message JSON:",e)}return s&&n.push(s),n}catch(e){throw console.error("Error getting session messages:",e),e}},sendMessage:async(e,t,o)=>{try{let n=new FormData;n.append("prompt",t);let a=await fetch(`${r.f}/api/chat/sessions/${e}/messages`,{method:"POST",body:n});return await s(a,o)}catch(e){throw console.error("Error sending message:",e),e}},deleteSession:async e=>{try{let t=await fetch(`${r.f}/api/chat/sessions/${e}`,{method:"DELETE"});if(!t.ok){let e=await t.text();throw Error(`Failed to delete chat session: ${t.status} - ${e}`)}}catch(e){throw console.error("Error deleting chat session:",e),e}},unifiedChat:async(e,t,o,n=()=>{})=>{if(!t)throw Error("Notebook ID is required for chat requests");try{let a=await fetch(`${r.f}/api/chat`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:e,notebook_id:t,session_id:o})});return await s(a,n)}catch(e){throw console.error("Error in unified chat:",e),e}}}}},22324:(e,t,o)=>{"use strict";o.d(t,{Z:()=>r,f:()=>n});let n=process.env.NEXT_PUBLIC_BACKEND_URL||"http://localhost:9091",r=process.env.NEXT_PUBLIC_WS_URL||"ws://localhost:9091/api/notebooks"},25262:(e,t,o)=>{Promise.resolve().then(o.bind(o,91719))},53589:()=>{},63317:()=>{},74324:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>a,metadata:()=>s});var n=o(22002),r=o(91719);o(63317);let s={title:"Sherlog Canvas",description:"Interactive runbooks for incident management",generator:"v0.dev"};function a({children:e}){return(0,n.jsx)(r.default,{children:e})}},85851:(e,t,o)=>{"use strict";o.d(t,{default:()=>p});var n=o(45408),r=o(26396),s=o.n(r);o(53589),o(12193);var a=o(25623);function i({children:e,...t}){return(0,n.jsx)(a.N,{...t,children:e})}var c=o(57262),l=o(89733);function d(){return(0,l.d)(e=>e.loadConnections),null}function u({children:e}){let t=(0,c.usePathname)(),o=t?.startsWith("/canvas/");return(0,n.jsxs)("div",{className:"min-h-screen flex flex-col",children:[!o&&(0,n.jsx)("header",{className:"border-b py-4 px-6 bg-background",children:(0,n.jsx)("div",{className:"container mx-auto",children:(0,n.jsx)("h1",{className:"text-xl font-bold",children:"Sherlog Canvas"})})}),(0,n.jsx)("main",{className:`flex-1 ${o?"":"container mx-auto py-6"}`,children:e})]})}function p({children:e}){return(0,n.jsxs)("html",{lang:"en",suppressHydrationWarning:!0,children:[(0,n.jsxs)("head",{children:[(0,n.jsx)("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),(0,n.jsx)("link",{rel:"preconnect",href:"https://fonts.gstatic.com",crossOrigin:"anonymous"}),(0,n.jsx)("link",{href:"https://fonts.googleapis.com/css2?family=DM+Sans:ital,wght@0,400;0,500;0,700;1,400&family=IBM+Plex+Mono:wght@400;500;600&family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400&display=swap",rel:"stylesheet"})]}),(0,n.jsx)("body",{className:s().variable,children:(0,n.jsxs)(i,{attribute:"class",defaultTheme:"light",enableSystem:!0,children:[(0,n.jsx)(d,{}),(0,n.jsx)(u,{children:e})]})})]})}},88310:(e,t,o)=>{Promise.resolve().then(o.bind(o,85851))},88594:()=>{},89733:(e,t,o)=>{"use strict";o.d(t,{d:()=>a});var n=o(88729),r=o(33725),s=o(18012);let a=(0,n.v)()((0,r.lt)((0,r.Zr)((e,t)=>({connections:[],loading:!1,error:null,toolDefinitions:{},toolLoadingStatus:{},mcpStatuses:{},availableTypes:[],loadConnections:async()=>{console.log("useConnectionStore: loadConnections called"),e({loading:!0,error:null});let o=t().loadAvailableTypes();try{let o=await s.F.connections.list();if(!Array.isArray(o))throw console.error("API response for connections is not an array:",o),Error("Invalid data received from server.");let n=o.map(e=>({...e,is_default:e.is_default??!1}));e({connections:n,loading:!1}),[...new Set(n.map(e=>e.type))].forEach(e=>{t().toolLoadingStatus[e]&&"idle"!==t().toolLoadingStatus[e]&&"error"!==t().toolLoadingStatus[e]||t().fetchToolsForConnection(e)})}catch(t){console.error("Failed to load connections:",t),e({error:"Failed to load connections. Please try again.",loading:!1,connections:[]}),o.catch(e=>console.error("Error from concurrent loadAvailableTypes:",e))}},loadAvailableTypes:async()=>{try{let t=await s.F.connections.getTypes();e({availableTypes:t})}catch(t){console.error("Failed to load available connection types:",t),e(e=>({error:e.error||"Failed to load connection types."}))}},createConnection:async o=>{try{if(console.log("useConnectionStore: Calling unified api.connections.create"),!o.name||!o.type)throw Error("Connection name and type are required to create.");let{name:n,type:r,config:a,...i}=o,c={name:n,type:r,...a||{},...i},l=await s.F.connections.create(c);if(l){e(e=>({connections:[...e.connections,l]}));let o=t().toolLoadingStatus[l.type];return o&&"idle"!==o&&"error"!==o||t().fetchToolsForConnection(l.type),l}throw console.error("useConnectionStore: api.connections.create returned nullish value unexpectedly."),Error("Connection creation failed unexpectedly.")}catch(e){if(console.error("useConnectionStore: Failed to create connection:",e),e instanceof Error)throw e;throw Error("An unknown error occurred while creating the connection.")}},updateConnection:async(t,o)=>{try{if(!o.type)throw Error("Connection type is required for update.");let n=await s.F.connections.update(t,o);return e(e=>({connections:e.connections.map(e=>e.id===t?n:e)})),n}catch(e){return console.error("Failed to update connection:",e),null}},deleteConnection:async t=>{try{return await s.F.connections.delete(t),e(e=>({connections:e.connections.filter(e=>e.id!==t)})),!0}catch(e){return console.error("Failed to delete connection:",e),!1}},setDefaultConnection:async t=>{try{return await s.F.connections.setDefault(t),e(e=>({connections:e.connections.map(e=>({...e,is_default:e.id===t}))})),!0}catch(e){return console.error("Failed to set default connection:",e),!1}},testConnection:async e=>{try{if(!e.type)throw Error("Connection type is required for testing.");return await s.F.connections.test(e)}catch(e){return console.error("Failed to test connection:",e),{valid:!1,message:e instanceof Error?e.message:"Failed to test connection"}}},fetchToolsForConnection:async o=>{console.log(`useConnectionStore: fetchToolsForConnection called for ${o}`);let n=t().toolLoadingStatus[o];if("loading"===n||"success"===n){console.log(`Skipping fetch for ${o}, status: ${n}`);return}e(e=>({toolLoadingStatus:{...e.toolLoadingStatus,[o]:"loading"}}));try{console.log(`useConnectionStore: Attempting to fetch tools for ${o}...`);let t=await s.F.connections.getTools(o);console.log(`useConnectionStore: Received tools for ${o}:`,t),e(e=>(console.log(`useConnectionStore: Setting definitions and status=success for ${o}`),{toolDefinitions:{...e.toolDefinitions,[o]:t},toolLoadingStatus:{...e.toolLoadingStatus,[o]:"success"}}))}catch(t){console.error(`Failed to fetch tools for ${o}:`,t),e(e=>(console.log(`useConnectionStore: Setting status=error for ${o}`),{toolLoadingStatus:{...e.toolLoadingStatus,[o]:"error"}}))}},getConnectionsByType:e=>t().connections.filter(t=>t.type===e),getDefaultConnection:e=>{let o=t().getConnectionsByType(e);return o.find(e=>e.is_default)||o[0]||null}}),{name:"connection-store",partialize:e=>({})})))},91719:(e,t,o)=>{"use strict";o.d(t,{default:()=>n});let n=(0,o(12674).registerClientReference)(function(){throw Error("Attempted to call the default export of \"/Users/navneetkumar/sherlog-canvas/frontend/app/client.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.")},"/Users/navneetkumar/sherlog-canvas/frontend/app/client.tsx","default")}};