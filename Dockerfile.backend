# Use an official Go image as the first stage
FROM golang:1.24-bookworm AS go_builder
# No further commands needed here, we just need the Go installation

# Start the final stage from the Python image
FROM python:3.11-slim

WORKDIR /app

# Set path to include Go copied from the builder stage
ENV PATH="/usr/local/go/bin:${PATH}"

# Initial update & install prereqs for adding repos
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg

# Add Docker GPG key and repository
RUN install -m 0755 -d /etc/apt/keyrings \
 && curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc \
 && chmod a+r /etc/apt/keyrings/docker.asc \
 && echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
      $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update lists again (for new repo) and install main dependencies & Docker CLI, then clean up
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    build-essential \
    unzip \
    nodejs \
    npm \
    docker-ce-cli \
 && rm -rf /var/lib/apt/lists/*

# Copy Go installation from the builder stage
COPY --from=go_builder /usr/local/go /usr/local/go

# Verify Go installation (optional, can be removed if confident)
RUN go version

# Install Deno
RUN curl -fsSL https://deno.land/x/install/install.sh | sh \
 && mv /root/.deno/bin/deno /usr/local/bin/deno

# Install mcp-grafana
ENV GOBIN=/usr/local/bin
RUN --mount=type=cache,target=/root/.cache/go-build go install github.com/grafana/mcp-grafana/cmd/mcp-grafana@latest

# Copy requirements first for better caching
COPY requirements.txt .

# Install uv and Python dependencies
RUN curl -LsSf https://astral.sh/uv/install.sh | sh \
 && /root/.local/bin/uv pip install --system --no-cache -r requirements.txt

# Create necessary directories in one go
RUN mkdir -p node_modules data logs \
 && chmod 777 node_modules logs

# Warm up the Pyodide environment
RUN deno run -A --unstable-worker-options jsr:@pydantic/mcp-run-python warmup

# Copy application code
COPY backend/ ./backend/

# Set default environment variables (can be overridden by .env)
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    LOG_LEVEL=INFO \
    SHERLOG_API_HOST=0.0.0.0 \
    SHERLOG_API_PORT=8000 \
    SHERLOG_DEBUG=false \
    SHERLOG_CONNECTION_STORAGE_TYPE=db \
    SHERLOG_CONNECTION_FILE_PATH=/app/data/connections.json \
    SHERLOG_DB_TYPE=sqlite \
    SHERLOG_DB_FILE=/app/data/sherlog.db \
    SHERLOG_ENVIRONMENT=development

# Expose API port
EXPOSE 8000

# Run the application with custom logging args
CMD ["python", "-m", "uvicorn", "backend.server:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "debug", "--no-access-log", "--workers", "4"]