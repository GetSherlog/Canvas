version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: sherlog-canvas-backend
    volumes:
      - ./data:/app/data
    environment:
      - SHERLOG_DEBUG=true
      - SHERLOG_ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SHERLOG_ANTHROPIC_MODEL=claude-3-7-sonnet-20250219
      - SHERLOG_QDRANT_URL=qdrant
      - SHERLOG_QDRANT_PORT=6333
      # Optional AWS credentials for S3 storage
      - SHERLOG_NOTEBOOK_STORAGE_TYPE=file
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      # Logfire configuration
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SHERLOG_ENV=${SHERLOG_ENV:-development}
      - PYTHONUNBUFFERED=1
    ports:
      - "9090:8000"
    depends_on:
      - qdrant
      - pg-mcp
      - mcp-grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: sherlog-canvas-frontend
    ports:
      - "3001:3001"
    depends_on:
      - backend
    environment:
      - WDS_SOCKET_PORT=3001
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: sherlog-canvas-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6343:6333"
      - "6344:6334"
    restart: unless-stopped
    
  pg-mcp:
    build:
      context: ./pg-mcp
      dockerfile: Dockerfile
    container_name: sherlog-canvas-pg-mcp
    ports:
      - "9211:8000"
    environment:
      - LOG_LEVEL=INFO  # Reduced logging in standby mode
      - PYTHONUNBUFFERED=1
      - PG_CONNECTION_STRING=${PG_CONNECTION_STRING:-postgresql://user:pass@localhost/dbname}
      - STANDBY_MODE=true  # Begin in standby mode (low resource usage)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.50'  # Limit CPU usage when in standby
          memory: 256M  # Limit memory usage when in standby
    
  mcp-grafana:
    # Using a custom build instead of the official image
    build:
      context: .
      dockerfile: Dockerfile.mcp-grafana
    container_name: sherlog-canvas-mcp-grafana
    ports:
      - "9110:8000"
    environment:
      - GRAFANA_URL=${GRAFANA_URL:-http://localhost:3000}
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-}
      - STANDBY_MODE=true  # Begin in standby mode (low resource usage)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.50'  # Limit CPU usage when in standby
          memory: 256M  # Limit memory usage when in standby
          
  mcp-kubernetes:
    build:
      context: .
      dockerfile: Dockerfile.mcp-kubernetes
    container_name: sherlog-canvas-mcp-kubernetes
    ports:
      - "9310:8000"
    volumes:
      - ${HOME}/.kube:/root/.kube:ro  # Mount kubeconfig from host (read-only)
    environment:
      - STANDBY_MODE=true  # Begin in standby mode (low resource usage)
      - KUBECONFIG=/root/.kube/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.50'  # Limit CPU usage when in standby
          memory: 256M  # Limit memory usage when in standby
          
  mcp-python:
    build:
      context: .
      dockerfile: Dockerfile.mcp-python
    container_name: sherlog-canvas-mcp-python
    ports:
      - "9410:8000"
    environment:
      - STANDBY_MODE=true  # Begin in standby mode (low resource usage)
      - PORT=8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.50'  # Limit CPU usage when in standby
          memory: 256M  # Limit memory usage when in standby

volumes:
  data:
    driver: local
  qdrant_data:
    driver: local