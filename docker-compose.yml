services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: sherlog-canvas-backend
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SHERLOG_HOST_FS_ROOT}:${SHERLOG_HOST_FS_ROOT}:ro
    env_file:
      - .env
    environment: # Single environment block
      - SHERLOG_OPENROUTER_API_KEY=${SHERLOG_OPENROUTER_API_KEY:-}
      - SHERLOG_AI_MODEL=${SHERLOG_AI_MODEL:-anthropic/claude-3.7-sonnet}
      - SHERLOG_REDIS_HOST=redis
      - SHERLOG_REDIS_PORT=6379
      - SHERLOG_HOST_FS_ROOT=${SHERLOG_HOST_FS_ROOT}
      - SHERLOG_QDRANT_DB_URL=http://qdrant:6333 # Used by git_repo_handler (indexing) and stdio mcp-server-qdrant (querying)
      - SHERLOG_QDRANT_EMBEDDING_MODEL=${SHERLOG_QDRANT_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
    ports:
      - "9091:8000"
      - "9092:8100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      qdrant: # Dependency for backend (indexing) and potential stdio MCPs
        condition: service_started

  redis:
    image: redis:7-alpine
    container_name: sherlog-canvas-redis
    ports:
      - "6379:6379" # Expose port if needed outside the docker network
    volumes:
      - redis_data:/data # Optional volume for persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sherlog-canvas-frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # New Qdrant Database Service
  qdrant:
    image: qdrant/qdrant
    container_name: sherlog-canvas-qdrant
    ports:
      - "6333:6333" # HTTP REST API
      - "6334:6334" # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      # QDRANT__LOG_LEVEL: DEBUG # Optional: for more verbose Qdrant logs
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

volumes:
  data:
    driver: local
  redis_data: # Define the named volume for Redis persistence
    driver: local
  qdrant_data: # Define the named volume for Qdrant persistence
    driver: local
